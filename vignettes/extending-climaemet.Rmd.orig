---
title: "Extending climaemet"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Extending climaemet}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
resource_files:
   - vignettes/example-gif.gif
---

<!-- extending-climaemet.Rmd is generated from extending-climaemet.Rmd.orig. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE,
  dev = "ragg_png",
  dpi = 90,
  fig.path = "./",
  tidy = "styler",
  out.width = "100%"
)
```

**climaemet** provides several functions for accessing a selection of endpoints
of the [AEMET API tool](https://opendata.aemet.es/dist/index.html?). However,
this package does not cover in full all the capabilities of the API.

For that reason, we provide the `get_data_aemet()` function, that allows to
access any API endpoint freely. The drawback is that the user would need to
handle the results by him/herself.

```{r setup}
library(climaemet)
```

## Example: Normalized text

Some API endpoints, as `predicciones-normalizadas-texto`, provides the results
as plain text on natural language. These results are not parsed by
**climaemet**, but can be retrieved as this:

```{r text}

# endpoint, today forecast

today <- "/api/prediccion/nacional/hoy"

# Metadata
knitr::kable(get_metadata_aemet(today))

# Data
pred_today <- get_data_aemet(today)

```

```{r, results='asis', comment=''}

# Produce a result

clean <- gsub("\r", "\n", pred_today, fixed = TRUE)
clean <- gsub("\n\n\n", "\n", clean, fixed = TRUE)

cat(paste("---\n\n", clean, "\n---"))

```

## Example: Maps

AEMET also provides map data, usually on `image/gif` format. One way to get this
kind of data is as follows:

```{r maps, fig.cap="Example: Surface analysis map provided by AEMET"}

# Endpoint of a map
a_map <- "/api/mapasygraficos/analisis"

# Metadata
knitr::kable(get_metadata_aemet(a_map))

the_map <- get_data_aemet(a_map)


# Write as gif and include it
giffile <- "example-gif.gif"
writeBin(the_map, giffile)

# Display on the vignette
knitr::include_graphics(giffile)

```

## Example: Beach forecast

This example is more elaborated, since the user would need to process the
results provided by the AEMET API.

In first place we need to get the database of beaches:

```{r getbeaches}

library(readr)
library(tidyr)
library(dplyr)

db_beach <- read_csv2("https://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv",
          show_col_types = FALSE,
          locale = locale(encoding = "ISO-8859-1"), 
          trim_ws = TRUE)

db_beach

```

Next, we can check the response of the API for a specific case:

```{r checkb}

# Heliopolis, Benicassim

id_beach <- "1202805"

api_entry <- "/api/prediccion/especifica/playa/"

api_call <- paste0(api_entry, id_beach)

# And we make the call

beach_api <- get_data_aemet(api_call)

glimpse(beach_api)

```

The response needs further treatment, the forecast is in the `prediccion` column
as a data set. We can have first a look:

```{r}

glimpse(beach_api$prediccion$dia[[1]])

```

We need then to un-nest the data frame of forecast, and perform a few additional
conversions of `Date` columns:

```{r}

for_pred <- beach_api$prediccion$dia[[1]]

# Need cols now

coln <- names(for_pred)


for_pred_2 <- unnest(for_pred, names_sep = "_", cols = all_of(coln)) %>%
  mutate(fecha = as.Date(as.character(fecha), 
                         tryFormats = c("%Y-%m-%d", "%Y/%m/%d", "%Y%m%d"))) %>%
  # We add interesting info of the metadata
  mutate(id_beach = beach_api$id,
         elaborado = lubridate::as_datetime(beach_api$elaborado)) %>%
  relocate(id_beach, elaborado, fecha)
  
glimpse(for_pred_2)


```

Once that we have the helper, we can wrap everything to provide a full-fledged
function:

```{r}

# Wrap on a function
aemet_usr__forecast_beach <- function(id_beach = NULL){
  api_entry <- "/api/prediccion/especifica/playa/"
  api_call <- paste0(api_entry, id_beach)
  
  beach_api <- get_data_aemet(api_call)
  for_pred <- beach_api$prediccion$dia[[1]]

# Need cols now

coln <- names(for_pred)


for_pred_2 <- unnest(for_pred, names_sep = "_", cols = all_of(coln)) %>%
  mutate(fecha = as.Date(as.character(fecha), 
                         tryFormats = c("%Y-%m-%d", "%Y/%m/%d", "%Y%m%d"))) %>%
  # We add interesting info of the metadata
  mutate(id_beach = beach_api$id,
         elaborado = lubridate::as_datetime(beach_api$elaborado)) %>%
  relocate(id_beach, elaborado, fecha)

for_pred_2
}
```

Here we go! We already have our function. We can try it now:

```{r trynow}

aemet_usr__forecast_beach("0301401") %>%
  glimpse()


# Several using apply and bind_rows
several <- db_beach$ID_PLAYA[7:10] %>%
  lapply(aemet_usr__forecast_beach) %>%
  bind_rows()

glimpse(several)

```
